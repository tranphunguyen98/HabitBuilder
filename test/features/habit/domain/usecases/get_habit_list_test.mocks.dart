// Mocks generated by Mockito 5.0.15 from annotations
// in habit/test/features/habit/domain/usecases/get_habit_list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:habit/core/error/failure.dart' as _i6;
import 'package:habit/features/habit/domain/entity/habit.dart' as _i5;
import 'package:habit/features/habit/domain/repositories/habit_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [HabitRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitRepository extends _i1.Mock implements _i3.HabitRepository {
  MockHabitRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> addHabit(_i5.Habit? habit) =>
      (super.noSuchMethod(Invocation.method(#addHabit, [habit]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, _i5.Habit>> getDetailHabit(String? id) =>
      (super.noSuchMethod(Invocation.method(#getDetailHabit, [id]),
              returnValue: Future<_i2.Either<_i6.Failure, _i5.Habit>>.value(
                  _FakeEither_0<_i6.Failure, _i5.Habit>()))
          as _i4.Future<_i2.Either<_i6.Failure, _i5.Habit>>);
  @override
  _i4.Future<_i2.Either<_i6.Failure, List<_i5.Habit>>> getHabitList() =>
      (super.noSuchMethod(Invocation.method(#getHabitList, []),
          returnValue: Future<_i2.Either<_i6.Failure, List<_i5.Habit>>>.value(
              _FakeEither_0<_i6.Failure, List<_i5.Habit>>())) as _i4
          .Future<_i2.Either<_i6.Failure, List<_i5.Habit>>>);
  @override
  _i4.Future<void> updateHabit(_i5.Habit? habit) =>
      (super.noSuchMethod(Invocation.method(#updateHabit, [habit]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteHabit(_i5.Habit? habit) =>
      (super.noSuchMethod(Invocation.method(#deleteHabit, [habit]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> resetHabitOnDay(_i5.Habit? habit, String? chosenDay) =>
      (super.noSuchMethod(
          Invocation.method(#resetHabitOnDay, [habit, chosenDay]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> habitCheckIn(_i5.Habit? habit, String? chosenDay,
          [int? checkInAmount]) =>
      (super.noSuchMethod(
          Invocation.method(#habitCheckIn, [habit, chosenDay, checkInAmount]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> saveDataOnLocal() =>
      (super.noSuchMethod(Invocation.method(#saveDataOnLocal, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> clearOffline() =>
      (super.noSuchMethod(Invocation.method(#clearOffline, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
